<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Subathon Timer</title>
</head>
<style>
@import url(https://fonts.bunny.net/css?family=chivo-mono:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|fira-code:300,400,500,600,700|inter:100,200,300,400,500,600,700,800,900|manrope:200,300,400,500,600,700,800|montserrat:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i);

:root {
  --font-size: 1em;
  --font-family: 'Inter', sans-serif;
  --font-weight: 400;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-family: var(--font-family);
  user-select: none;
  color: #fff;
}

.subathon-container {
  width: 500px;
  height: 300px;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  margin-top: 20px;
}

.container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.timer {
  font-weight: bold;
  position: relative;
}

.timer .text {
  font-family: "Chivo Mono", monospace;
  font-size: 70px;
  font-weight: 600;
  display: flex;
}

.timer .text .colon {
  width: 25px;
  display: flex;
  justify-content: center;
}

.next-goal {
  display: flex;
  font-size: 24px;
  font-weight: bold;
  align-items: center;
}

.next-goal .text {
  font-weight: bold;
  margin-right: 10px;
}

.next-goal .money-required {
  font-size: 24px;
  font-weight: bold;
  margin-right: 10px;
}

.next-goal .goal-title {
  font-size: 24px;
  font-weight: bold;
  margin-left: 10px;
}

.tag-color {
  color: #fff;
}

.chivo-mono {
  font-family: "Chivo Mono", monospace;
}

.paused-icon {
  position: absolute;
  font-size: 50px;
  color: #fff;
  width: 80px;
  height: 80px;
  display: flex;
  align-items: center;
  justify-content: center;
  left: -80px;
}

.paused-icon svg {
  height: 100%;
  width: 100%;
}
</style>
<body>
  <div class="subathon-container">
    <h2>Uptime</h2>
    <div class="timer">
      <div class="paused-icon">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" width="24" height="24" stroke-width="2"> <path d="M6 5m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v12a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z"></path> <path d="M14 5m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v12a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z"></path> </svg> 
      </div>
      <div class="text">
        <div class="hours">
          54
        </div>
        <div class="colon">:</div>
        <div class="minutes">
          11
        </div>
        <div class="colon">:</div>
        <div class="seconds">
          42
        </div>
      </div>
    </div>
    <div class="next-goal">
      <div class="text">
        Goal
      </div>
      <div class="money-required tag-color chivo-mono">
        $250
      </div>
      -
      <div class="goal-title">
        New emote
      </div>
    </div>
  </div>
</body>
<script>
const currencies = {
  "USD": "$",
  "EUR": "€",
  "GBP": "£",
  "JPY": "¥",
  "CNY": "¥",
  "RUB": "₽",
  "KRW": "₩",
  "INR": "₹",
  "BRL": "R$",
  "CAD": "$",
  "AUD": "$",
  "MXN": "$",
  "IDR": "Rp",
  "TRY": "₺",
  "ZAR": "R",
  "HKD": "$",
  "PHP": "₱",
}

let data = <%- JSON.stringify(info) %>;
let lastDataUpdate = 0;

function update() {
  const timers = document.querySelectorAll('.timer');
  const next_goals = document.querySelectorAll('.next-goal');

  const tag_color = document.querySelectorAll('.tag-color');

  tag_color.forEach(tag => {
    tag.style.color = "<%= data.options.sub_notif_tag_color %>";
  });

  document.querySelector(".next-goal .text").style.color = "<%= data.options.sub_notif_text_color %>";

  timers.forEach(timer => {
    timer.style.color = "<%= data.options.timer_color %>";

    if (data.paused) {
      timer.style.color = "<%= data.options.timer_paused_color %>";
      timer.querySelector(".paused-icon").style.display = "flex";
      timer.querySelector(".paused-icon svg").style.fill = "<%= data.options.timer_paused_color %>";
      timer.querySelector(".paused-icon svg").style.stroke = "<%= data.options.timer_paused_color %>";

    } else {
      timer.querySelector(".paused-icon").style.display = "none";
    }

    timer.querySelector('.text .hours').innerText = String(formatSeconds(data.uptime).hours).padStart(2, '0');
    timer.querySelector('.text .minutes').innerText = String(formatSeconds(data.uptime).minutes).padStart(2, '0');
    timer.querySelector('.text .seconds').innerText = String(formatSeconds(data.uptime).seconds).padStart(2, '0');
  });

  document.querySelectorAll(".multiplier").forEach(multiplier => {
    if (data.multiplier > 1) {
      multiplier.style.display = "block";
      multiplier.querySelector('.multi').innerText = `${data.multiplier}x`;
      multiplier.style.color = "<%= data.options.text_color %>";
    } else {
      multiplier.style.display = "none";
    }
  });

  next_goals.forEach(next_goal => {
    next_goal.style.color = "<%= data.options.text_color %>";
    next_goal.style.paddingTop = "<%= data.options.next_goal_vertical_gap %>px";

    const time = formatSeconds(data.current_uptime_goal.goal);
    const money_required = next_goal.querySelector('.money-required');
    money_required.innerText = String(
      `${(time.hours.toString()).padStart(2, '0')}:${(time.minutes.toString()).padStart(2, '0')}:${(time.seconds.toString()).padStart(2, '0')}`
    );

    const goal_title = next_goal.querySelector('.goal-title');
    goal_title.innerText = data.current_uptime_goal.title;
  });
}

setInterval(async () => {
  if (Date.now() - lastDataUpdate > 1500) {
    const response = await fetch('/api/timer');
    data = await response.json();
    lastDataUpdate = Date.now();
  };

  // Even if the data isn't synced properly,
  // the uptime will still update to avoid
  // poor user experience

  if (!data.paused && data.uptime > 0) {
    data.uptime = data.uptime + 1;
  }

  update();
}, 1000);

update();

function formatSeconds(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = seconds % 60;

  let string = "";

  if (hours > 0) {
    string += `${String(hours).padStart(2, '0')}:`;
  }

  string += `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;

  return {
    hours,
    minutes,
    seconds: remainingSeconds,
    string
  };
}

// Reload the page every 3 minutes
// incase any data is out of sync
// or the page is stuck
// or the page config has changed
setInterval(() => {
  document.location.reload();
}, 3 * 1000 * 60);
</script>
</html>